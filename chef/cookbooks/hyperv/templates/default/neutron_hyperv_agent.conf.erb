[DEFAULT]
verbose=true
control_exchange=neutron
rpc_backend=neutron.openstack.common.rpc.impl_kombu
rabbit_host=<%= @rabbit_settings[:address] %>
rabbit_port=<%= @rabbit_settings[:port] %>
rabbit_userid=<%= @rabbit_settings[:user] %>
rabbit_password=<%= @rabbit_settings[:password] %>
# the RabbitMQ virtual host (string value)
rabbit_virtual_host=<%= @rabbit_settings[:vhost] %>
policy_file=<%= @openstack_config %>\neutron\policy.json

logdir=<%= @openstack_log %>
logfile=neutron-hyperv-agent.log

[HYPERV]
# (StrOpt) Type of network to allocate for tenant networks. The
# default value 'local' is useful only for single-box testing and
# provides no connectivity between hosts. You MUST either change this
# to 'vlan' and configure network_vlan_ranges below or to 'flat'.
# Set to 'none' to disable creation of tenant networks.
#
# tenant_network_type = local
# Example: tenant_network_type = vlan

# (ListOpt) Comma-separated list of
# <physical_network>[:<vlan_min>:<vlan_max>] tuples enumerating ranges
# of VLAN IDs on named physical networks that are available for
# allocation. All physical networks listed are available for flat and
# VLAN provider network creation. Specified ranges of VLAN IDs are
# available for tenant network allocation if tenant_network_type is
# 'vlan'. If empty, only gre and local networks may be created.
#
# network_vlan_ranges =
# Example: network_vlan_ranges = physnet1:1000:2999
<% if @neutron_networking_plugin == 'ml2' -%>
<% if @neutron_ml2_type_drivers.include?('vlan') -%>
tenant_network_type = vlan
network_vlan_ranges = physnet1:<%= @vlan_start %>:<%= @vlan_end %>
<% elsif @neutron_ml2_type_drivers.include?('flat') -%>
tenant_network_type = flat
network_vlan_ranges = physnet1
<% else -%>
tenant_network_type = local
network_vlan_ranges = physnet1
<% end -%>
<% end -%>

[AGENT]
# Agent's polling interval in seconds
# polling_interval = 2
polling_interval=2

# (ListOpt) Comma separated list of <physical_network>:<vswitch>
# where the physical networks can be expressed with wildcards,
# e.g.: ."*:external".
# The referred external virtual switches need to be already present on
# the Hyper-V server.
# If a given physical network name will not match any value in the list
# the plugin will look for a virtual switch with the same name.
#
# physical_network_vswitch_mappings = *:external
# Example: physical_network_vswitch_mappings = net1:external1,net2:external2
physical_network_vswitch_mappings=*:vswitch

# (StrOpt) Private virtual switch name used for local networking.
#
# local_network_vswitch = private
# Example: local_network_vswitch = custom_vswitch

# (BoolOpt) Enables metrics collections for switch ports by using Hyper-V's
# metric APIs. Collected data can by retrieved by other apps and services,
# e.g.: Ceilometer. Requires Hyper-V / Windows Server 2012 and above.
#
# enable_metrics_collection = False
